create database Case_Study;
use Case_Study
select * from Product;
select * from location;
select * from fact;

--Question 1)  Display the number of states present in the LocationTable.
select count(state) as Number_of_States from location;

--Question 2)  How many products are of regular type?
select count(Product) as Number_of_Products from product where type='Regular';

--Question 3) How much spending has been done on marketing of product ID1?
select sum(Marketing) as Spending from fact where productid=1;

--Question 4) What is the minimum sales of a product?
select top 1 min(sales), product from fact join product on product.productid=fact.productid group by product order by min(sales);

--Question 5) Display the max Cost of Good Sold (COGS).
select max(cogs) from fact;

--Question 6) Display the details of the product where product type is coffee.
select * from product where product_type='coffee';

--Question 7) Display the details where total expenses are greater than 40.
select * from fact where total_expenses>40;

--Question 8) What is the average sales in area code 719?
select avg(sales) from fact where area_code=719;

--Question 9) Find out the total profit generated by Colorado state.
select sum(profit) from fact join location on fact.area_code=location.area_code where state='Colorado';

--Question 10) Display the average inventory for each product ID.
select distinct Productid, avg(inventory) from fact group by productid order by productid;

--Question 11) Display state in a sequential order in a LocationTable.
select distinct state from location order by state asc;

--Question 12) Display the average budget of the Product where the average budget margin should be greater than 100.
select product, avg(budget_Margin) as average_budget from fact join product on fact.productid=product.productid group by product having avg(budget_margin)>100;

--Question 13) What is the total sales done on date 2010-01-01?
select sum(sales) from fact where Date='2010-01-01';

--Question 14) Display the average total expense of each product ID on an individual date.
select date, productid, avg(total_expenses) as Average_total_expense from fact group by date, productid order by date, productid;

--Question 15) Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code.
select date, product.productid, product_type, product, sales, profit, state, location.area_code from fact join product on fact.productid=product.productid join 
location on fact.area_code=location.area_code;

--Question 16) Display the rank without any gap to show the sales wise rank.
select sales, dense_rank() over(order by sales) as sales_wise_rank from fact;

--Question 17) Find the state wise profit and sales.
select distinct state, sum(profit) as profit, sum(sales) as sales from fact join location on fact.area_code=location.area_code group by state;

--Question 18) Find the state wise profit and sales along with the product name.
select state, sum(profit) as profit, sum(sales) as sales, product from fact join location on fact.area_code=location.area_code join
product on product.productid=fact.productid group by state, product order by state, product; 

--Question 19) If there is an increase in sales of 5%, calculate the increased sales.
select productid, sum(sales), sum(sales)*1.05 as increased_sales from fact group by productid order by productid;

--Question 20) Find the maximum profit along with the product ID and product type.
select product.productid, product_type, max(profit) as max_profit from fact join product on fact.productid=product.productid group by product.productid, product_type 
order by product.productid;

--Question 21) Create a stored procedure to fetch the result according to the product type from Product Table.
create procedure item_type @item varchar(25)
as
select * from product where product_type=@item
go
exec item_type @item ='Coffee';

--Question 22) Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss.
select total_expenses, iif(total_expenses<60,'loss','profit') from fact;

--Question 23) Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order.
select datepart(week, date) as week_number, productid, sum(sales) as total_sales from fact group by rollup(datepart(week, date), productid)

--Question 24) Apply union and intersection operator on the tables which consist of attribute area code.
select area_code from fact
union
select area_code from location;
select area_code from fact
intersect
select area_code from location;

--Question 25) Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference.
create function select_product_type (@type varchar(25))
returns table
as
return
(select * from product where product_type=@type)
select * from dbo.select_product_type('Coffee');

--Question 26) Change the product type from coffee to tea where product ID is 1 and undo it.
begin transaction
update product set product_type='tea' where productid=1 and product_type='coffee'
rollback transaction
select * from product

--Question 27) Display the date, product ID and sales where total expenses are between 100 to 200.
select date, productid, sales from fact where total_expenses between 100 and 200;

--Question 28) Delete the records in the Product Table for regular type.
delete from product where type='regular';

--Question 29) Display the ASCII value of the fifth character from the column Product.
select ascii(substring(Product,5,1)) from Product